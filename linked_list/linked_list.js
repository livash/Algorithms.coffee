// Generated by CoffeeScript 1.6.3

/*
 Version of a Stack implementation using
 doubly-linked linked-list
*/

(function() {
  var LinkedList, Node;

  Node = require('./node');

  LinkedList = (function() {
    function LinkedList(head) {
      this.head = head != null ? head : null;
      this.tail = this.head;
      null;
    }

    LinkedList.prototype.add = function(node) {
      var temp;
      if (!(node instanceof Node)) {
        return;
      }
      if (this.head == null) {
        this.head = node;
      }
      if (this.tail == null) {
        this.tail = node;
      }
      temp = this.head;
      this.head = node;
      return this.head.next = temp;
    };

    LinkedList.prototype.insert = function(node, after_node) {};

    LinkedList.prototype["delete"] = function(node) {
      if (node.isHeadNode() && node.isTailNode()) {
        this.head = null;
        this.tail = null;
      } else if (node.isTailNode()) {
        this.tail = node.prev;
        this.tail.next = null;
      } else if (node.isHeadNode()) {
        this.head = node.next;
        node.next.prev = null;
      } else {
        this.head = node.prev;
        this.tail = node.next;
        this.head.next = tail;
        this.tail.prev = head;
      }
      return node.remove();
    };

    LinkedList.prototype.findByValue = function(val) {};

    LinkedList.prototype.print = function() {};

    LinkedList.prototype.length = function() {
      var counter, node;
      if (this.head === null) {
        return 0;
      }
      counter = 0;
      node = this.head;
      while (node !== this.tail) {
        counter++;
        node = node.next;
      }
      return counter + 1;
    };

    return LinkedList;

  })();

  module.exports = LinkedList;

}).call(this);
