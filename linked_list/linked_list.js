// Generated by CoffeeScript 1.6.3

/*
 Version of a Stack implementation using
 doubly-linked linked-list
*/

(function() {
  var LinkedList, Node;

  Node = require('./node');

  LinkedList = (function() {
    function LinkedList(head) {
      this.head = head != null ? head : null;
      this.tail = this.head;
      null;
    }

    LinkedList.prototype.add = function(node) {
      var temp;
      if (!(node instanceof Node)) {
        return;
      }
      if (this.head === null) {
        this.head = node;
        this.tail = node;
      }
      temp = this.head;
      this.head = node;
      this.head.next = temp;
      return temp.prev = node;
    };

    LinkedList.prototype.insert = function(new_node, after_node) {
      var moved_node;
      if (!(after_node === null || this.findByValue(after_node.data))) {
        return false;
      }
      if (!new_node.belongsToNoList()) {
        return false;
      }
      if (after_node === null) {
        new_node.prev = this.tail;
        this.tail.next = new_node;
        return this.tail = new_node;
      } else {
        moved_node = after_node.next;
        new_node.next = moved_node;
        moved_node.prev = new_node;
        after_node.next = new_node;
        return new_node.prev = after_node;
      }
    };

    LinkedList.prototype["delete"] = function(node) {
      var after_el, before_el;
      if (node.isHeadNode() && node.isTailNode()) {
        this.head = null;
        this.tail = null;
      } else if (node.isTailNode()) {
        this.tail = node.prev;
        this.tail.next = null;
      } else if (node.isHeadNode()) {
        this.head = node.next;
        this.head.prev = null;
      } else {
        before_el = node.prev;
        after_el = node.next;
        before_el.next = after_el;
        after_el.prev = before_el;
      }
      return node.remove();
    };

    LinkedList.prototype.findByValue = function(val) {
      var node;
      node = this.head;
      while (node.next !== null) {
        if (node.data === val) {
          return node;
        }
        node = node.next;
      }
      return null;
    };

    LinkedList.prototype.print = function() {};

    LinkedList.prototype.length = function() {
      var counter, node;
      if (this.head === null) {
        return 0;
      }
      counter = 0;
      node = this.head;
      while (node !== this.tail) {
        counter++;
        node = node.next;
      }
      return counter + 1;
    };

    return LinkedList;

  })();

  module.exports = LinkedList;

}).call(this);
